PREFIX bif: <bif:>
PREFIX ex: <http://ex.org/a#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geom: <http://geovocab.org/geometry#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX uom: <http://www.opengis.net/def/uom/OGC/1.0/>
PREFIX lgdo: <http://linkedgeodata.org/ontology/>
PREFIX wd: <http://www.wikidata.org/entity/>
PREFIX wdt: <http://www.wikidata.org/prop/direct/>

# Consulta 1: Extraemos la informacion del Airbnb m치s economico y con review m치s reciente que tenga m치s de 20 reviews, y donde el precio es distinto de 0

SELECT ?listing ?name ?latitude ?longitude ?price ?reviews ?last_review
WHERE {
    SELECT ?listing ?name ?latitude ?longitude ?price ?reviews ?last_review
    WHERE {
        ?listing rdf:type ex:Listing ;
            ex:name ?name ;
            ex:latitude ?latitude ;
            ex:longitude ?longitude ;
            ex:price ?price ;
            ex:number_of_reviews ?reviews ;
            ex:last_review ?last_review .

        FILTER(?price != 0)
        FILTER(?reviews > 20)
  	}
    ORDER BY DESC(?last_review)
}
ORDER BY ASC(?price)
LIMIT 1

# Consulta 2: Buscamos informacion geografica relevante cerca del listing de la Consulta 1

SELECT ?geometry ?label
WHERE {
    SERVICE <http://linkedgeodata.org/sparql> {
        ?s geom:geometry [ geo:asWKT ?geometry ] ;
            a lgdo:Museum;
            rdfs:label ?label .
        FILTER(bif:st_intersects(?geometry, bif:st_point(-73.79916, 40.69085), 10))
    }
}

SELECT ?geometry ?label
WHERE {
    SERVICE <http://linkedgeodata.org/sparql> {
        ?s geom:geometry [ geo:asWKT ?geometry ] ;
            a lgdo:Hospital;
            rdfs:label ?label .
        FILTER(bif:st_intersects(?geometry, bif:st_point(-73.79916, 40.69085), 2))
    }
}

SELECT ?geometry ?label
WHERE {
    SERVICE <http://linkedgeodata.org/sparql> {
        ?s geom:geometry [ geo:asWKT ?geometry ] ;
            a lgdo:Pharmacy;
            rdfs:label ?label .
        FILTER(bif:st_intersects(?geometry, bif:st_point(-73.79916, 40.69085), 2))
    }
}

SELECT ?geometry ?label
WHERE {
    SERVICE <http://linkedgeodata.org/sparql> {
        ?s geom:geometry [ geo:asWKT ?geometry ] ;
            a lgdo:Bank;
            rdfs:label ?label .
        FILTER(bif:st_intersects(?geometry, bif:st_point(-73.79916, 40.69085), 2))
    }
}

SELECT ?geometry ?label
WHERE {
    SERVICE <http://linkedgeodata.org/sparql> {
        ?s geom:geometry [ geo:asWKT ?geometry ] ;
            a lgdo:Theatre;
            rdfs:label ?label .
        FILTER(bif:st_intersects(?geometry, bif:st_point(-73.79916, 40.69085), 10))
    }
}

# Consulta 3: Buscamos restaurantes que esten dentro del mismo neighbourhod de la Consulta 1

SELECT ?name ?price ?address ?rating
WHERE {
    ?listing rdf:type ex:Listing ;
        ex:name "IT'S SIMPLY CONVENIENT!" ;
        ex:neighbourhood ?neighbourhood .

    ?neighbourhood_group ex:neighbourhood ?neighbourhood ;
        ex:name ?neighbourhood_name.

    ?restaurant rdf:type ex:Restaurant ;
        ex:neighbourhood_group ?neighbourhood_name ;
        ex:price ?price ;
        ex:address ?address ;
        ex:rating ?rating ;
  		ex:name ?name .

    FILTER(?rating > 3.5)
    FILTER(?price <= 2.0)
}
ORDER BY DESC(?rating)
LIMIT 1

# IDEAS

1. Ver los restaurantes que esten en el mismo neighbourhood de un listing y que esten a menos de ciertos metros de distancia. Devolver el nombre y el address de los restaurantes.

2. Ver los museos que esten alrededor de un listing y ver los restaurantes que esten cerca de esos museos. Devolver el nombre del museo y de los restaurantes.

3. Ver los restaurantes que estan cerca de un listing y que tengan una puntuacion mayor a cierto valor y un categoria de precio menor a 3.0. Devolver el nombre, el address, neighbourhood_group, rating y price

4. Ver los listings que sean de categoria private room, que tengan un numero de reviews mayor a 50 y con un precio menor a cierto valor y sacar los 10 m치s actualizados. Que devuelvan el nombre del listing, el precio, cantidad de noches minimas, neighbourhod.