PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://ex.org/a#>

# Consulta 1

SELECT ?listing ?neighbourhood ?neighbourhood_group ?name
WHERE {
  # Buscar el neighbourhood asociado al listing "airbnb"
  ?listing rdf:type ex:Listing ;
           ex:name "Clean & quiet apt home by the park" ;
           ex:neighbourhood ?neighbourhood .
  ?neighbourhood_group ex:neighbourhood ?neighbourhood ;
                       ex:name ?neighbourhood_name.
  ?restaurant rdf:type ex:Restaurant ;
              ex:neighbourhood_group ?neighbourhood_name ;
  			  ex:name ?name.
}

# Consulta 2

SELECT ?restaurantName ?listingName ?neighbourhoodName ?lgdPlaceName ?lgdPlaceType
WHERE {
    # Restaurant information
    ?restaurant rdf:type ex:Restaurant ;
                ex:name ?restaurantName ;
                ex:latitude ?restLat ;
                ex:longitude ?restLon ;
                ex:neighbourhood_group ?restNeighbourhood .
    
    # Listing information
    ?listing rdf:type ex:Listing ;
             ex:name ?listingName ;
             ex:latitude ?listLat ;
             ex:longitude ?listLon ;
             ex:neighbourhood ?listNeighbourhood .
    
    # Neighbourhood group information
    ?neighbourhoodGroup rdf:type ex:Neighbourhood_Group ;
                        ex:name ?neighbourhoodName ;
                        ex:neighbourhood ?specificNeighbourhood .
    
    # Find nearby Linked Geo Data places
    SERVICE <http://linkedgeodata.org/sparql> {
        ?lgdPlace a lgdo:Amenity ;  # Only query for amenities in LGD
                 geo:lat ?lgdLat ;
                 geo:long ?lgdLon ;
                 rdfs:label ?lgdPlaceName ;
                 rdf:type ?lgdPlaceType .

        # Find LGD places near the restaurant's location
        FILTER(
            bif:st_distance(
                bif:st_point(?restLon, ?restLat), 
                bif:st_point(?lgdLon, ?lgdLat)
            ) < 0.01
        )
    }

    # Ensure data consistency by matching neighbourhood names
    FILTER (?restNeighbourhood = ?listNeighbourhood)
}

# Consulta 3

PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX ex: <http://ex.org/>

SELECT ?restaurantName ?distance
WHERE {
    ?restaurant rdf:type ex:Restaurant ;
                ex:name ?restaurantName ;
                geo:hasGeometry ?geometry .
    ?geometry geo:asWKT ?restaurantWKT .

    # Reference point (e.g., central location for the query)
    BIND("POINT(-73.97237 40.64749)"^^geo:wktLiteral AS ?referencePoint)

    # Calculate distance
    BIND(geof:distance(?restaurantWKT, ?referencePoint, uom:metre) AS ?distance)

    # Filter results to within 10,000 meters (10 km)
    FILTER(?distance <= 10000)
}
ORDER BY ?distance

# Consulta 4

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://ex.org/a#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX uom: <http://www.opengis.net/def/uom/OGC/1.0/>
PREFIX lgdo: <http://linkedgeodata.org/ontology/>
PREFIX bif: <bif:>

SELECT ?listing ?neighbourhood ?neighbourhood_group ?name
WHERE {
  # Buscar el neighbourhood asociado al listing "airbnb"
  ?listing rdf:type ex:Listing ;
           ex:name "Clean & quiet apt home by the park" ;
           ex:neighbourhood ?neighbourhood .
  ?neighbourhood_group ex:neighbourhood ?neighbourhood ;
                       ex:name ?neighbourhood_name.
  ?restaurant rdf:type ex:Restaurant ;
              ex:neighbourhood_group ?neighbourhood_name ;
  			  ex:name ?name ;
       		  ex:latitude ?lat ;
              ex:longitude ?lon ;
  SERVICE <http://linkedgeodata.org/sparql> {
        ?lgdPlace a lgdo:Amenity ;  # Only query for amenities in LGD
                 geo:lat ?lgdLat ;
                 geo:long ?lgdLon ;
                 rdfs:label ?lgdPlaceName ;
                 rdf:type ?lgdPlaceType .

        # Find LGD places near the restaurant's location
        FILTER(
            bif:st_distance(
                bif:st_point(?lon, ?lat), 
                bif:st_point(?lgdLon, ?lgdLat)
            ) < 0.1
        )
  }
}

# Consulta 5

PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://ex.org/a#>
PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX uom: <http://www.opengis.net/def/uom/OGC/1.0/>
PREFIX lgdo: <http://linkedgeodata.org/ontology/>

PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX uom: <http://www.opengis.net/def/uom/OGC/1.0/>
PREFIX ex: <http://ex.org/a#>

SELECT ?listing ?neighbourhood ?neighbourhood_group ?name
WHERE {
  # Buscar el neighbourhood asociado al listing "airbnb"
  ?listing rdf:type ex:Listing ;
           ex:name "Clean & quiet apt home by the park" ;
           ex:neighbourhood ?neighbourhood ;
           ex:latitude ?ABlat ;
           ex:longitude ?ABlon .

  # Construir el punto de referencia
  BIND(STRDT(CONCAT("POINT(", STR(?ABlon), " ", STR(?ABlat), ")"), geo:wktLiteral) AS ?referencePoint)

  # Asociar neighbourhood_group con neighbourhood
  ?neighbourhood_group ex:neighbourhood ?neighbourhood ;
                       ex:name ?neighbourhood_name.

  # Buscar restaurantes en el mismo neighbourhood_group
  ?restaurant rdf:type ex:Restaurant ;
              ex:neighbourhood_group ?neighbourhood_name ;
              ex:name ?name ;
              ex:latitude ?Rlat ;
              ex:longitude ?Rlon .

  # Construir el punto del restaurante
  BIND(STRDT(CONCAT("POINT(", STR(?Rlon), " ", STR(?Rlat), ")"), geo:wktLiteral) AS ?restaurantPoint)

  # Calcular la distancia
  BIND(geof:distance(?restaurantPoint, ?referencePoint, uom:metre) AS ?distance)

  # Filtro de distancia
  FILTER(?distance <= 100000)
}

# IDEAS

1. Ver los restaurantes que esten en el mismo neighbourhood de un listing y que esten a menos de ciertos metros de distancia. Devolver el nombre y el address de los restaurantes.

2. Ver los museos que esten alrededor de un listing y ver los restaurantes que esten cerca de esos museos. Devolver el nombre del museo y de los restaurantes.

3. Ver los restaurantes que estan cerca de un listing y que tengan una puntuacion mayor a cierto valor y un categoria de precio menor a 3.0. Devolver el nombre, el address, neighbourhood_group, rating y price

4. Ver los listings que sean de categoria private room, que tengan un numero de reviews mayor a 50 y con un precio menor a cierto valor y sacar los 10 mÃ¡s actualizados. Que devuelvan el nombre del listing, el precio, cantidad de noches minimas, neighbourhod.

Arreglar el construct de Restaurant